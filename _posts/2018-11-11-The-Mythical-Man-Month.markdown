---
layout:     post
title:      "《人月神话》读书笔记"
subtitle:   "人月是危险和带有欺骗性的神话，因为它暗示人员数量和时间是可以相互替换的"
date:       2018-11-11 22:0:00
author:     "Wudashan"
header-img: "img/post-bg-the-mythical-man-month.jpg"
catalog: true
tags:
    - 项目管理
    - 软件工厂
    - 读书笔记
---

> 书籍链接：https://book.douban.com/subject/26358448/

# 序言

博主本人看的是《人月神话・40周年中文纪念版》，2015年清华大学出版社出版，但这本书其实是1995年《人月神话・20周年英文纪念版》的一个译本，这种把20年前的书翻译后称作40周年也太标题党了。那么，由上面的描述就可以推算出第一版《人月神话》，是在1975年出版的，掌握这几个时间点，有利于理解该书的历史背景。

本书第1~15章是第一版的原版内容。第16章是作者在1986年发表的一篇论文“没有银弹：软件工程的根本和次要问题”，第17章是在1995年出版纪念版时对外界关于第16章论文的一些批评进行回答，第18章是对前面第1~15章每个章节进行总结，最后第19章是与本书论点相关的短文。

---

# 第1章 焦油坑

1. 编程系统产品开发的工作量是供个人使用的、独立开发的构件程序的9倍。软件构件产品化引起了3倍工作量，将软件构件整合成完整系统所需要的设计、集成和测试又加强了3倍的工作量，这些高成本的构件在根本上是相互独立的。
2. 编程行业“满足我们内心深处的创造渴望和愉悦所有人的共有情感”，其提供了五种乐趣：
	* 创建事物的快乐；
	* 开发对其他人有用的东西的乐趣；
	* 将可以活动、相互啮合的零部件组装成类似迷宫的东西，这个过程所体现出令人神魂颠倒的魅力；
	* 面对不重复的任务，不断学习的乐趣；
	* 工作在如此易于驾驭的介质上的乐趣——纯粹的思维活动——其存在、移动和运转方式完全不同于实际物体。
3. 同样，这个行业具有一些内在固有的苦恼：
	* 将做事方式调整到追求完美是学习编程的最困难部分；
	* 由其他人来设定目标，并且必须依靠自己无法控制的事物（特别是程序）；权威不等同于责任；
	* 实际情况看起来要比这点好一些：真正的权威来自于每次任务的完成；
	* 任何创造性活动都伴随着枯燥艰苦的劳动，编程也不例外；
	* 人们通常期望项目在接近结束时，软件项目能收敛得快一些，然而，情况却是越接近完成，收敛得越慢；
	* 产品在完成前总面临着陈旧过时的威胁；只有实际需要时，才会用到最新的设想。

---

# 第2章 人月神话

1. 缺乏合理的时间进度是造成项目滞后的最主要原因，它比其他所有因素的总和影响还大。
2. 良好的烹饪需要时间，某些任务无法在不损害结果的情况下加快速度。
3. 所有的编程人员都是乐观主义者：“一切都将运作良好”。
4. 由于编程人员通过纯粹的思维活动来开发，我们期待在实现过程中不会碰到困难。
5. 但是，我们的构思本身是有缺陷的，因此总会有bug。
6. 围绕着成本核算的估计技术，混淆了工作量和项目进展。**人月是危险和带有欺骗性的神话，因为它暗示人员数量和时间是可以相互替换的。**
7. 在若干人员中分解任务会引发额外的沟通工作量——培训和相互沟通。
8. 关于进度安排，我的经验是为1/3计划、1/6编码、1/4构件测试以及1/4系统测试。
9. 作为一门学科，我们缺乏数据估计。
10. 我们对自己的估计技术不确定，因此在管理和客户的压力下，我们常常缺乏坚持的勇气。
11. Brooks法则：为进度落后的项目增加人手，只会使进度更加落后。
12. 向软件项目中增派人手从三个方面增加了项目必要的总体工作量：任务重新分配本身和所造成的工作中断。培训新人员。额外的相互沟通。

---

# 第3章 外科手术队伍

1. 同样有两年工作经验而且在受到同样培训的情况下，优秀的专业程序员的生产率是较差的程序员的10倍。
2. 小型、精干队伍是最好的——思绪尽可能少。
3. 两个人的团队，其中一个人是领导者，常常是最佳的人员使用方法。
4. 对于真正意义上的大型系统。小型精干的队伍太慢了。
5. 实际上，绝大多数大型编程系统的经验显示，一拥而上的开发方法是高成本、速度缓慢、低效的，开发出的产品无法进行概念上的集成。
6. 一位首席程序员、类似于外科手术队伍的团队架构提供了一种方法——既能获得由少数头脑产生的产品完整性，又能得到多位协助人员的总体生产效率，还彻底地减少了沟通的工作量。

---

# 第4章 贵族专制、民主政治和系统设计

1. “概念完整性是系统设计中最重要的考虑因素。”
2. “功能与理解上的复杂程度的比值才是系统设计的最终测试目标。而不仅仅是丰富的功能。（该比值是对易用性的一种测量，由简单和复杂应用共同验证。）
3. 为了获得概念完整性，设计必须由一个人或者具有共识的小型团队来完成。
4. “对于非常大型的项目。将体系结构方面的工作与具体实现相分离是获得概念完整性的强有力方法。”（其同样适用于小型项目。）
5. “如果要得到系统概念上的完整性。就必须有人控制这些概念。这实际上是一种无需任何歉意的贵族专制统治。”
6. 纪律、规则对行业是有益的。外部的体系结构规定实际上是增强，而不是限制实现小组的创造性。
7. 概念上统一的系统能更快的开发和测试。
8. 体系结构、设计实现、物理实现的许多工作可以并行。