---
layout:     post
title:      "《人月神话》读书笔记"
subtitle:   "人月是危险和带有欺骗性的神话，因为它暗示人员数量和时间是可以相互替换的"
date:       2018-11-11 22:0:00
author:     "Wudashan"
header-img: "img/post-bg-the-mythical-man-month.jpg"
catalog: true
tags:
    - 项目管理
    - 软件工厂
    - 读书笔记
---

> 书籍链接：https://book.douban.com/subject/26358448/

# 序言

书名《人月神话・40周年中文纪念版》，2015年清华大学出版社出版，但这本书其实是1995年《人月神话・20周年英文纪念版》的一个译本，这种把20年前的书翻译后称作40周年也太标题党了。那么，由上面的描述就可以推算出第一版《人月神话》，是在1975年出版的，掌握这几个时间点，有利于理解该书的历史背景。

本书第1~15章是第一版的原版内容。第16章是作者在1986年发表的一篇论文“没有银弹：软件工程的根本和次要问题”，第17章是在1995年出版纪念版时对外界关于第16章论文的一些批评进行回答，第18章是对前面第1~15章每个章节进行总结，最后第19章是与本书论点相关的短文。

---

# 第1章 焦油坑

1. 编程系统产品开发的工作量是供个人使用的、独立开发的构件程序的9倍。软件构件产品化引起了3倍工作量，将软件构件整合成完整系统所需要的设计、集成和测试又加强了3倍的工作量，这些高成本的构件在根本上是相互独立的。
2. 编程行业“满足我们内心深处的创造渴望和愉悦所有人的共有情感”，其提供了五种乐趣：
	* 创建事物的快乐；
	* 开发对其他人有用的东西的乐趣；
	* 将可以活动、相互啮合的零部件组装成类似迷宫的东西，这个过程所体现出令人神魂颠倒的魅力；
	* 面对不重复的任务，不断学习的乐趣；
	* 工作在如此易于驾驭的介质上的乐趣——纯粹的思维活动——其存在、移动和运转方式完全不同于实际物体。
3. 同样，这个行业具有一些内在固有的苦恼：
	* 将做事方式调整到追求完美是学习编程的最困难部分；
	* 由其他人来设定目标，并且必须依靠自己无法控制的事物（特别是程序）；权威不等同于责任；
	* 实际情况看起来要比这点好一些：真正的权威来自于每次任务的完成；
	* 任何创造性活动都伴随着枯燥艰苦的劳动，编程也不例外；
	* 人们通常期望项目在接近结束时，软件项目能收敛得快一些，然而，情况却是越接近完成，收敛得越慢；
	* 产品在完成前总面临着陈旧过时的威胁；只有实际需要时，才会用到最新的设想。

---

# 第2章 人月神话

1. 缺乏合理的时间进度是造成项目滞后的最主要原因，它比其他所有因素的总和影响还大。
2. 良好的烹饪需要时间，某些任务无法在不损害结果的情况下加快速度。
3. 所有的编程人员都是乐观主义者：“一切都将运作良好”。
4. 由于编程人员通过纯粹的思维活动来开发，我们期待在实现过程中不会碰到困难。
5. 但是，我们的构思本身是有缺陷的，因此总会有bug。
6. 围绕着成本核算的估计技术，混淆了工作量和项目进展。**人月是危险和带有欺骗性的神话，因为它暗示人员数量和时间是可以相互替换的。**
7. 在若干人员中分解任务会引发额外的沟通工作量——培训和相互沟通。
8. 关于进度安排，我的经验是为1/3计划、1/6编码、1/4构件测试以及1/4系统测试。
9. 作为一门学科，我们缺乏数据估计。
10. 我们对自己的估计技术不确定，因此在管理和客户的压力下，我们常常缺乏坚持的勇气。
11. Brooks法则：为进度落后的项目增加人手，只会使进度更加落后。
12. 向软件项目中增派人手从三个方面增加了项目必要的总体工作量：任务重新分配本身和所造成的工作中断。培训新人员。额外的相互沟通。

---

# 第3章 外科手术队伍

1. 同样有两年工作经验而且在受到同样培训的情况下，优秀的专业程序员的生产率是较差的程序员的10倍。
2. 小型、精干队伍是最好的——思绪尽可能少。
3. 两个人的团队，其中一个人是领导者，常常是最佳的人员使用方法。
4. 对于真正意义上的大型系统。小型精干的队伍太慢了。
5. 实际上，绝大多数大型编程系统的经验显示，一拥而上的开发方法是高成本、速度缓慢、低效的，开发出的产品无法进行概念上的集成。
6. 一位首席程序员、类似于外科手术队伍的团队架构提供了一种方法——既能获得由少数头脑产生的产品完整性，又能得到多位协助人员的总体生产效率，还彻底地减少了沟通的工作量。

---

# 第4章 贵族专制、民主政治和系统设计

1. “概念完整性是系统设计中最重要的考虑因素。”
2. “功能与理解上的复杂程度的比值才是系统设计的最终测试目标。而不仅仅是丰富的功能。（该比值是对易用性的一种测量，由简单和复杂应用共同验证。）
3. 为了获得概念完整性，设计必须由一个人或者具有共识的小型团队来完成。
4. “对于非常大型的项目。将体系结构方面的工作与具体实现相分离是获得概念完整性的强有力方法。”（其同样适用于小型项目。）
5. “如果要得到系统概念上的完整性。就必须有人控制这些概念。这实际上是一种无需任何歉意的贵族专制统治。”
6. 纪律、规则对行业是有益的。外部的体系结构规定实际上是增强，而不是限制实现小组的创造性。
7. 概念上统一的系统能更快的开发和测试。
8. 体系结构、设计实现、物理实现的许多工作可以并行。

---

# 第5章 画蛇添足

1. 尽早交流和持续沟通能使结构师有较好的成本意识，使开发人员获得对设计的信心，并且不会混淆各自的责任分工。
2. 结构师如何成功的影响实现：
	* 牢记是开发人员承担创造性地实现责任。结构师只能提出建议。
	* 时刻准备着为所指定的说明建议一种实现的方法。准备接受任何其他可行的方法。
	* 对上述建议保持低调和平静。
	* 准备对所建议的改进放弃坚持。
	* 听取开发人员在体系结构上改进的建议。
3. 第二个系统是人们所设计的最危险的系统。通常的倾向是过分地进行设计。	
4. OS/360是典型的画蛇添足的例子。(Windows NT似乎是20世纪90年代的例子。)
5. 为功能分配一个字节和微秒的优先权值是一个很有价值的规范化方法。

---

# 第6章 贯彻执行

1. 即使是大型的设计团队。设计结果也必须由一个或两个人来完成，以确保这些决定是一致的。
2. 必须明确定义体系结构中与先前定义不同的地方，重新定义的详细程度应该与原先的说明一致。
3. 出于精确性的考虑，我们需要形式化地设计定义；同样，我们需要记叙性定义来加深理解。
4. 必须采用形式化定义和记叙性定义中的一种作为标准。另一种作为辅助措施；他们都可以作为表达的标准。
5. 设计实现，包括模拟仿真，可以充当一种体系结构的定义；这种方法有一些严重的缺点。
6. 直接整合是一种强制推行软件的结构性标准的方法。
7. “如果起初至少有两种以上的实现，体系结构定义会更加整洁和规范。”
8. 允许体系结构师对实现人员的询问做出应答解释是非常重要的，并且必须进行日志记录和整理发布。
9. “项目经理最好的朋友就是他每天要面对的对手。独立的产品测试机构/小组。”

---

# 第7章 为什么巴比伦塔会失败

> 巴比伦塔项目的失败是因为缺乏交流以及交流的结果——组织。

## 交流
1. “因为左手不知道右手在做什么。从而进度灾难、功能的不合理和系统缺陷纷纷出现。”由于存在对其他人的各种假设，团队成员之间的理解开始出现偏差。
2. 团队应该以尽可能多的方式进行相互之间的交流。非正式的进行简要技术陈述的常规项目会议，共享的正式项目工作手册。

## 项目工作手册
1. 项目工作手册“不是独立的一篇文档，它是对项目必须产生的一系列文档进行组织的一种结构”。
2. “项目所有的文档都必须是该工作手册结构的一部分。”
3. 需要尽早和仔细地设计工作手册结构。
4. 事先制定良好结构的工作手册，可以将后来书写的文字放置在合适的章节中，并且可以提高产品手册的质量。
5. 每个团队成员应该能够看到所有材料。
6. 实时更新是至关重要的。
7. 工作手册的使用者应该将注意力集中在上次阅读后的变更以及关于这些变更重要性的评述上。
8. Parnas强烈的认为使每个人看到每件事的目标是完全错误的；各个部分应该被封装，从而没有人需要或者被允许看到其他部分的内部结构，只需要了解接口。

## 组织架构
1. 团队组织的目标是为了减少必要的交流和协作量。
2. 为了减少交流，组织结构包括了人力划分和限定职责范围。
3. 传统的树状组织结构反映了权力的结构原理——不允许双重领导。
4. 组织中的交流是网状而不是树状结构，因此所有的特殊组织机制（往往体现为组织结构图中的虚线部分）都是为了进行调整，以克服树状组织结构中交流缺乏的困难。
5. 每个子项目具有两个领导角色——产品负责人，技术主管或结构师。这两个角色的职能有很大的区别，需要不同的技能。
6. 两种角色的任意组合都可以是非常有效的：
	* 产品负责人和技术主管是同一个人；
	* 产品负责人作为总指挥，技术主管充当其左右手；
	* 技术主管作为总指挥，产品负责人充当其左右手。

---

# 第8章 胸有成竹

1. 仅仅通过对编码部分时间的估计，然后乘以其他部分的相对系数是无法得出对整项工作的精确估计的。
2. 构建独立小型程序的数据不适用于编程系统项目。
3. 程序开发随程序规模的大量增长而增长。
4. Postman的ICL数据显示，相对于其他活动，全职程序员仅将50%的时间用于编程和调试。
5. 当使用适当的高级语言时，程序编制的生产率可以提高5倍。

---

# 第9章 削足适履

1. 除了运行时间以外，程序所占据的内存空间也是主要开销。特别是对于操作系统。它的很多程序是永久驻留在内存中的。
2. 即便如此，花费在驻留程序所占据内存上的金钱仍是物有所值的，比其他任何在配置上投资的效果都要好。规模本身不是坏事，但不必要的规模是不可取的。
3. 软件开发人员必须设立规模目标，控制规模，发明一些减少规模的方法。
4. 规模预算不仅仅在占据内存方面是明确的，同时还应该指明程序对磁盘的访问次数。
5. 规模预算必须与分配的功能相关联。在指明模块大小的同时，确切定义模块的功能。
6. 在大型团队中，各个小组倾向于不断的局部优化，以满足自己的目标，而较少考虑对用户的整体影响。这种方向性的问题是大型项目的主要危险。
7. 在整个实现的过程期间，系统结构师必须保持持续的警觉，确保连贯的系统完整性。
8. 从系统整体出发以及面向用户的态度是软件编程管理人员最重要的职能。
9. 再早期应该制定策略，以决定用户可选项目的粗细程度，因为将它们作为整体打包能够节省内存空间。
10. 暂存区空间的尺寸以及每次磁盘访问的程序数量是很关键的决策，因为性能是规模的非线性曲线。
11. 为了取得良好的空间-时间折衷，开发队伍需要得到特定的某种语言或者机型的编程技能培训，特别是在使用新语言或者新机器时。
12. 编程需要技术积累，每个项目需要自己的标准组件库。
13. 精炼、充分和快速的程序往往是战略性突破的结果，而不仅仅是技巧上的提高。
14. 这种突破常常是一种新型算法。
15. 更普遍的是，战略上的突破常来自于对数据或表的重新表达。数据的表现形式是编程的根本。

---

# 第10章 提纲挈领

1. “前提：在一片文件的汪洋中，少数文档成为了关键的枢纽，每个项目管理的工作都围绕着他们运转，它们是经理们的主要个人工具。”
2. 对于软件项目，关键文档是目标、用户手册、内部文档、进度、预算、组织机构图和工作空间分配。
3. 因此，即使是小型项目，项目经理也应该在项目早期对上述的一系列文档进行规范化。
4. 以上集合中每一个文档的准备工作都将注意力集中在思索和对讨论的提炼上，而书写这项活动需要上百次的细小决定。正是由于他们的存在，人们才能从令人迷惑的现象中得到清晰、确定的策略。
5. 对每个关键文档的维护提供状态监督和预警机制。
6. 每个文档本身就可以作为检查列表或者数据库。
7. 项目经理的基本职责是使每个人都向着相同的方向前进。
8. 项目经理的主要日常工作是沟通，而不是做出决定；文档使各项计划和决策在整个团队范围内得到交流。
9. 只有一小部分管理人员的时间——可能只有20%——用来从自己头脑外部获取信息。

---

# 第11章 未雨绸缪

1. 第一个开发的系统对于大多数项目并不合用。它可能太慢、太大，而且难以使用或者三者兼而有之。
2. 系统的丢弃和重新设计可以一步完成，也可以一块块的实现，但这是必须完成的步骤。
3. 将开发的第一个系统——丢弃原型——发布给用户，可以获得时间，但它的代价高昂——对于用户，使用极度痛苦；对于重新开发的人员分散了精力；对于产品，影响了信誉，即使最好的再设计也难以挽回名声。
4. 因此，为舍弃而计划，无论如何，你一定要这样做。
5. “开发人员交付的是用户满意程度，而不仅仅是实际的产品。”
6. 用户的实际需要和用户感觉会随着程序的构建、测试和使用而变化。
7. 软件产品易于掌握的特性和不可见性，导致它的构建人员面临着永恒的需求变更。
8. 目标上和开发策略上的一些正常变化无可避免。事先为它们做准备总比假设他们不会出现要好得多。

## 为变更计划组织架构

1. 程序员不愿意为设计书写文档，不仅仅是因为惰性，更多的是源于设计人员的踌躇——要为自己尝试性的设计决策进行辩解。
2. 为变更组建团队比为变更进行设计更加困难。
3. 只要管理人员和技术人才的天赋允许，老板必须对他们的能力培养给予极大的关注，使管理人员和技术人才具有互换性；特别是希望在技术和管理角色之间自由地分配人手的时候。
4. 具有两条晋升线的高效组织机构存在着一些社会性的障碍。人们必须警惕并积极地同它做持续的斗争。
5. 很容易为不同的晋升线建立相互一致的薪水级别，但同等威信的建立需要一些强烈的心理措施：相同的办公室，一样的支持以及技术调动的优先补偿。
6. 组建外科手术队伍式的软件开发团队是对上述问题所有方面的彻底冲击。对于灵活组织架构问题，这的确是一个长期行之有效的解决方案。

## 前进两步，后退一步——程序维护

1. 程序维护主要由各种变更组成，如修复设计缺陷，新增功能，或者是使用环境或配置变换引起的调整。
2. 维护成本受用户数目的影响。用户越多，所发现的错误也越多。
3. 缺陷修复总会以20%~50%的几率引入新的bug。
4. 每次修复之后，必须重新运行先前所有的测试用例，确保系统不会以更隐蔽的方式被破坏。

## 前进一步，后退一步——系统熵随时间增加

1. 所有修改都倾向于破坏系统的架构，增加了系统的混乱程度（熵）。即使是最熟练的软件维护工作，也只是延缓了系统退化到不可修复的混乱状态的进程，以致必须要重新进行设计。（许多程序升级的真正需要，如性能等，尤其会冲击它的内部结构边界。原有边界引发的不足常常在日后才会出现。）

---

# 第12章 干将莫邪

1. 项目经理应该制定一套策略，并为通用工具的开发分配资源；与此同时，他还必须意识到专业工具的需求。
2. 目标机器的使用需求量是一种特殊的曲线。刚开始使用率非常低，突然出现爆炸性的增长，接着趋于平缓。
3. 抛开理论不谈，一次分配给某个小组的连续的目标时间块被证明是最好的安排方法，比不同小组的穿插使用更为有效。

## 高级语言

1. 只有懒散和惰性会妨碍高级语言和交互式编程的广泛应用。
2. 高级语言不仅提高了生产率，还改进了调试：bug更少，而且更容易寻找。

## 交互式编程

1. 某些应用上，批处理系统决不会被交互式系统所替代。
2. 调试是系统编程中较慢和较困难的部分，漫长的调试周转时间是调试的祸根。 
3. 有限的数据表明，系统软件开发中交互式编程的生产率至少是原来的两倍。

---

# 第13章 整体部分

1. 第4、5、6章所意味的煞费苦心、详尽体系结构工作不但使产品更加易于使用，而且使开发更容易进行且bug更不容易产生。
2. 许许多多的失败完全源于那些产品未精确定义的地方。
3. 在编写任何代码之前，规格说明必须提交给外部测试小组，以详细地检查说明的完整性和明确性。
4. 在每个步骤中，都尽可能的使用级别较高的表达方法。
5. 有时必须回退，推翻顶层设计，重新开始。
6. 结构化编程中，程序的控制结构仅由支配代码块的给定集合所组成。这种方法很好地避免了bug，是一种正确的思考方式。
7. 系统调试相对于单元测试所花费的时间会比预料的更长。
8. 系统调试的困难程度证明了需要一种完备系统化和可计划的方法。
9. 系统调试仅仅应该在所有部件能够运作之后开始。
10. 开发大量的辅助调试平台和测试代码是很值得的，代码量甚至可能有测试对象的一半。
11. 系统测试期间，一次只添加一个构件。

---

# 第14章 祸起萧墙

1. 一天一天的进度落后比起重大灾难更难以识别，更不容易防范和更加难以弥补。
2. 控制大型项目的第一个步骤是制定进度表，进度表有里程碑和日期组成。
3. 里程碑必须是具体的、特定的和可度量的事件，能够进行清晰的定义。
4. 如果里程碑定义的非常明确，以至于无法自欺欺人时，程序员很少会就里程碑的进展弄虚作假。
5. 慢性进度偏离是士气杀手。
6. 同优秀的棒球队伍一样，进取对于杰出的软件开发团队是不可缺少的必要品德。
7. 不存在关键路径进度的替代品，使人们能够辨别计划偏移的情况。
8. 状态的获取是困难的，因为下属经理有充分的理由不提供信息共享。
9. 老板的不良反应肯定会对信息的完全公开造成压制；相反，仔细区分状态报告、毫无惊慌地接收报告、决不越俎代庖，将能鼓励诚实的汇报。
10. 必须有评审机制，使所有成员可以通过它了解真正的状态。出于这个目的，里程碑的进度和完成文档是关键。
11. 项目经理必须停止对估计日期的怀疑。

---

# 第15章 另外一面

1. 对于软件编程产品来说，程序向用户所呈现的面貌——文档，与提供给机器识别的内容同样重要。
2. 即使是完全开发给自己使用的程序，描述性文字也是必须的，因为它们会被用户（作者）所遗忘。
3. 培训和管理人员基本上没有向编程人员成功的灌输对待文档的积极态度——文档能在整个生命周期对克服懒惰和进度的压力起促进和激励作用。
4. 这样的失败并不都是因为缺乏热情或者说服力，而是没能正确的展示如何有效和经济地编制文档。
5. 大多数文档只提供了很少的总结性内容。必须放慢脚步，稳妥地进行。
6. 由于关键的用户文档包含了软件相关的基本决策，因此它的绝大部分需要在程序编制之前书写。
7. 每一份发布的程序应该包括一些测试用例，其中一部分用于校验输入数据，一部分用于边界输入数据，另一部分用于无效的输入数据。
8. 最小化文档担负的三个关键思路：
	* 借助那些必须存在的语句，如名称和声明等，来附加加尽可能多的“文档”信息。
	* 使用空格和格式来表现从属和嵌套关系，提高程序的可读性。
	* 以段落注释。特别是模块标题的形式，向程序中插入必要的记叙性文字。
9. 程序修改人员所使用的文档中，除了描述事情如何，还应阐述它为什么那样。对于加深理解，目的是非常关键的，即使是高级语言的语法，也不能表达目的。

# 第1版结束语

1. 软件系统可能是人类创造中最错综复杂的事物。
2. 软件工程的焦油坑在将来很长一段时间内仍然会使人们举步维艰，无法自拔。

# 总结

本书虽然一共有19章节，但是精华部分在第2~7章，后续章节则探讨了软件工厂管理的其他方面。作者向我们表达了几个重要的观点：1. 程序员总是乐观的，总是假设船到桥头自然直。 2. 人月神话，人们错误地认为1个人工作10个月的工作量，10个人工作1个月就可以完成。3. 开发团队应该向外科手术团队一样，队伍小型且精干，由一位架构师领导。4. 概念完整性，由架构师统一系统概念，保证整体系统体现的是一套完整的设计理念。




